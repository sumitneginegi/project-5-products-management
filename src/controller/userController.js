const userModel = require('../models/userModel')
const bcrypt = require('bcrypt');
const upload = require('../aws/config')
const validation = require("../validations/validator");
const jwt = require("jsonwebtoken");
const multer = require("multer")
const mongoose = require("mongoose");





//====================================  Creating Users  ======================================//

const createUser = async function (req, res) {
   try{
    let data = req.body;

    const { fname, lname, email, phone, password, address } = data;

    if (!validation.isValidBody(data)) {
        return res.status(400).send({ status: false, msg: "Please provide data in the request body!" })
    }
     
    if(!fname) return res.status(400).send({status : false, message : "First Name is required!"})
    if (!validation.isValid(fname) && !validation.alphabetTestOfString(fname)) {
        return res.status(400).send({ status: false, msg: "fname is invalid" })
    }

    if(!lname) return res.status(400).send({status : false, message : "Last Name is required!"})
    if (!validation.isValid(lname) && !validation.alphabetTestOfString(lname)) {
        return res.status(400).send({ status: false, msg: "lname is invalid" })
    }

    if(!email) return res.status(400).send({status : false, message : "Email is required!"})
    if (!validation.isValidSyntaxOfEmail(email)) {
        return res.status(400).send({ status: false, msg: "Email is invalid!" })
    }
    let userEmail = await userModel.findOne({ email : email })
    if (userEmail)
        return res.status(401).send({ status: false, msg: "This email address already exists, please enter a unique email address!" })


    if(!phone) return res.status(400).send({status : false, message : "Phone number is required!"})
    if (!validation.isValidMobileNum(phone)) {
        return res.status(400).send({ status: false, msg: "Phone is invalid" })
    }
    let userNumber = await userModel.findOne({ phone: phone })
    if (userNumber)
        return res.status(409).send({ status: false, msg: "This phone number already exists, please enter a unique phone number!" })

    if(!password) return res.status(400).send({status : false, message : "Password is required!"})
    if (!validation.isValidPassword(password)) {
        return res.status(400).send({ status: false, msg: "Password should be strong, please use one number, one upper case, one lower case and one special character and characters should be between 8 to 15 only!" })
    }

   const salt = await bcrypt.genSalt(10) // creates special characters
   data.password = await bcrypt.hash(data.password, salt) // applies special characters generated by genSalt to password


    if(!address.shipping.street) return res.status(400).send({status : false, message : "Shipping Street is required!"})
    if (!validation.isValid(address.shipping.street)) {
        return res.status(400).send({ status: false, msg: "Invalid shipping street!" })
    }

    if(!address.shipping.city) return res.status(400).send({status : false, message : "Shipping City is required!"})
    if (!validation.isValid(address.shipping.city)) {
        return res.status(400).send({ status: false, msg: "Invalid shipping city!" })
    }

    if(!address.shipping.pincode) return res.status(400).send({status : false, message : "Shipping Pincode is required!"})
    if (!validation.isValidPinCode(address.shipping.pincode)) {
        return res.status(400).send({ status: false, msg: "Invalid shipping pincode!" })
    }

    if(!address.billing.street) return res.status(400).send({status : false, message : "Billing Street is required!"})
    if (!validation.isValid(address.billing.street)) {
        return res.status(400).send({ status: false, msg: "Invalid billing street!" })
    }

    if(!address.billing.city) return res.status(400).send({status : false, message : "Billing City is required!"})
    if (!validation.isValid(address.billing.city)) {
        return res.status(400).send({ status: false, msg: "Invalid billing city!" })
    }

    if(!address.billing.pincode) return res.status(400).send({status : false, message : "Billing Pincode is required!"})
    if (!validation.isValidPinCode(address.billing.pincode)) {
        return res.status(400).send({ status: false, msg: "Invalid billing pincode!" })
    }


    let files = req.files
    if (files && files.length > 0) {
      
        let uploadedFileURL = await upload.uploadFile(files[0])
      
        data.profileImage = uploadedFileURL;
    }
    else {
        res.status(400).send({ msg: "Files are required!" })
    }
    const document = await userModel.create(data)
    res.status(201).send({ status: true, data: document })

}catch(error){
    res.status(500).send({message : error.message})
}
}


//*****Validation********** 
const isValidObjectId = (ObjectId) => {
  return mongoose.Types.ObjectId.isValid(ObjectId);
};

const isValidRequest = function (object) {
  return Object.keys(object).length > 0;
};

const nameregex = /^[a-zA-Z\. ]*$/;
const phoneregex = /^([6-9]\d{9})$/;
const emailregex = /^\w+([\.-]?\w+)@\w+([\.-]?\w+)(\.\w{2,3})+$/;
const passwordregex = /^[a-zA-Z0-9!@#$%^&*]{8,15}$/;
let  pinregex = /^\d{6}$/;
const streetregex = /^[0-9\\\/# ,a-zA-Z]+[ ,]+[0-9\\\/#, a-zA-Z]{1,}$/;



//*********************POST LOGIN************************** 
//=========================================login================================================>
const loginUser = async (req, res) => {
  try {
      const reqBody = req.body;
      const { email, password } = reqBody;

      //------------------------------body validation----------------------------------->
      if (Object.keys(reqBody).length === 0)
          return res.status(400).send({ status: false, message: `Please fill the data.` })

      if (Object.keys(reqBody).length > 2)
          return res.status(400).send({ status: false, message: `You can't add extra field.` })

      //------------------------------email validation--------------------------------->
      if (!email)
          return res.status(400).send({ status: false, message: `email is required.` });

      if (!validation.validateEmail(email))
          return res.status(400).send({ status: false, message: ` '${email}' this email is not valid.` });

      //------------------------------password validation--------------------------------->

      if (!password)
          return res.status(400).send({ status: false, message: `Password is required.` });

      if (!validation.isValidPassword(password))
          return res.status(400).send({ status: false, message: `Password should be 8-15 char & use 0-9,A-Z,a-z & special char this combination.` });

      //--------------------------------exitsUser----------------------------------->
      const existUser = await userModel.findOne({ email });

      if (!existUser)
          return res.status(401).send({ status: false, message: 'Please register first.' });

      // ---------------------------decoding hash password--------------------------->
      let passwordInDb = existUser.password
        
        let encryptPassword = await bcrypt.compare(password, passwordInDb)

        if(!encryptPassword){
            return res.status(400).send({status:false, message:'Incorrect Password'})
        } 




      // ------------------------------token generation----------------------------->
      const payload = { userId: existUser._id, iat: Math.floor(Date.now() / 1000) };

      const token = jwt.sign(payload, 'Group30-Project-Shopping-cart', { expiresIn: '365d' });
      res.setHeader("x-api-key",token)
      // --------------------------------response-------------------------------------->
      res.status(200).send({ status: true, message: 'Login Successfull', data: { userId: existUser._id, token: token } });

  }
  catch (err) {
      res.status(500).send({ status: false, error: err.message });
  }
};
//===========================get user==================

const getuser=async function (req,res){
    try{
    let userId=req.params.userId
    //if(!userId) return res.status(400).send({status:false,message:"userId should be present"})
    if (!isValidObjectId(userId))
      return res
        .status(400)
        .send({ status: false, message: "Please enter valid userId" });
    const user=await userModel.findOne ({_id:userId})
    return res.status(200).send({ status: true, message: 'User Profile Details', data: user })
    } catch (error) {
        res.status(500).send({ status: false, message: error.message })
    }
    }




//==========================PUT API USER===================================


const updateProfile = async function (req, res) {
  try {
    const userId = req.params.userId;
 
    let data = req.body;

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).send({ msg: "userId is invalid", status: false })
  }

    if (!isValidObjectId(userId))
      return res
        .status(400)
        .send({ status: false, message: "Please enter valid userId" });

    if (!isValidRequest(data))
      return res
        .status(400)
        .send({
          status: false,
          message: "for registration user data is required",
        });

          // AUTHORIZATION
        //-->
        let tokenUserId = req.tokenId
        if(tokenUserId !== userId){
            return res.status(403).send({status:false, message:'you are not authorized'})
        }
        //<--

 

    let { fname, lname, email, profileImage, phone, password, address } =req.body;

    let files = req.files;
    if (files && files.length > 0) {
      let uploadedFileURL = await upload.uploadFile(files[0]);
      profileImage = uploadedFileURL;
    } 
    // else {
    //   return res.status(400).send({ message: "No file found" });
    // }
//******FNAME VALIDATION****
let dataForUpdate={ }    
if (fname) {
      if (!fname.match(nameregex)) return res.status(400).send({ status: false, message: "Please enter a valid FName" });
      dataForUpdate.fname=fname;
    }
//******LNAME VALIDATION****
    if (lname) {
      if (!lname.match(nameregex)) return res.status(400).send({ status: false, message: "Please enter a valid LName" });
      dataForUpdate.lname=lname;
    }
//******EMAIL VALIDATION****
    if (email) {
      if (!email.match(emailregex)) return res.status(400).send({ status: false, message: "Please Enter valid Email" });
      
      let existEmail = await userModel.findOne({ email: email });
      if (existEmail) return res.status(400).send({status: false,message: "User with this email is already registered",});
          dataForUpdate.email=email;
    }
//******Phone VALIDATION****
    if (phone) {
      if (!phone.match(phoneregex)) return res.status(400).send({ status: false, message: "Please Enter valid phone Number" });
      
      let existphone = await userModel.findOne({ phone: phone });
      if (existphone) 
        return res.status(400).send({
          status: false,
          message: "User with this phone number is already registered.",
        });
        dataForUpdate.phone=phone;
    }
 //****PASSWORD VALIDATIONS***
    if (password) {
      if (!password.match(passwordregex)) 
        return res.status(400).send({
          status: false,
          message: "please Enter valid password and it's length should be 8-15",
        });
        const salt = await bcrypt.genSalt(13);
        password = await bcrypt.hash(req.body.password, salt);
        dataForUpdate.password=password;
    }
//******ADDRESS VALIDATIONS*****
 //____Shipping address validations____

 if (address) {
      if (address["shipping"]) {
        if (address["shipping"]["street"]) {
          if (address.shipping.street.trim().length == 0  ) // /&&  !streetregex(address.shipping.street)
            return res
              .status(400)
              .send({
                status: false,
                message: "Please enter  street address for shipping ",
              });
        }
        if (address.shipping.city) {
          if (address.shipping.city.trim().length == 0)
            return res.status(400).send({
              status: false,
              message: "Please enter valid city address for shipping ",
            });
        }
        if (address.shipping.pincode) {
         // if (!pinregex(address.shipping.pincode))
          if (!pinregex .test(address.shipping.pincode))
            return res.status(400).send({
              status: false,
              message: "Please enter valid shipping address pincode",
            });
        }
      }
//_____Billing address validations___
      if (address["billing"]) {
        if (address["billing"]["street"]) {
          if (address.billing.street.trim().length == 0  )   //&& !streetregex(address.shipping.street)
            return res.status(400).send({
              status: false,
              message: "Please enter valid street address for billing ",
            });
        }
        if (address.billing.city) {
          if (address.billing.city.trim().length == 0)
            return res.status(400).send({
              status: false,
              message: "Please enter valid city address for billing ",
            });
        }
        if (address.billing.pincode) {
          if (!pinregex .test(address.billing.pincode))
            return res.status(400).send({
              status: false,
              message: "Please enter valid billing address pincode",
            });
        }
      } dataForUpdate.address = address;
    }
  //**BCRYPT SALT**
    // const salt = await bcrypt.genSalt(13);
    // password = await bcrypt.hash(req.body.password, salt);
    // console.log(password);

  //   const salt = await bcrypt.genSalt(10) // creates special characters
  //  data.password = await bcrypt.hash(data.password, salt) // applies special characters generated by genSalt to password
    
    dataForUpdate.isDeleted = false;
  //***UPDATE******
    // const updates = {
    //   fname: fname,
    //   lname: lname,
    //   email: email,
    //   profileImage: profileImage,
    //   phone: phone,
    //   password: password,
    //   address: address,
    // };

    let updateUser = await userModel.findByIdAndUpdate(
      { _id: userId },
      { $set: dataForUpdate },
      { new: true }
    );
    return res.status(200).send({ status: true, data: updateUser });
  } catch (error) {
    return res.status(500).send({ status: false, error: error.message });
  }
};
















module.exports={createUser,loginUser,updateProfile,getuser}





